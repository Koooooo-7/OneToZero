1.语法

数据类型:
总的上来说，用过python之后再来使用php，对于这种动态类型的使用没有什么太大的变化，主要就是增加了$符号的变量声明以及分号和大括号的回归。
用的最多的还是常见的数据类型，数组用的相对更多(相比于python，像是列表和字典的混合形式)。

PHP对于数组的遍历个人习惯用foreach的方式，莫名感觉相比java的foreach感觉更人性化(?)。
同样的，在模版中也有对数组的遍历，volist和foreach这两种使用较多，如果只是简单的输出用foreach比较方便，需要加上一些更多的控制条件(输出个数等)，
用volist比较好。

我常用的数组的操作,基本都是以array_开头的方法。
对于 键值对形式  的数组(字典): 
$arr1 = ['a'=>1, 'b'=>'2', 'c'=>'3']; 
$arr2 = ['A'=>1, 'b'=>'24'];
========================数组的合并===================
数组的合并array_merge(),这个方法会让后面相同键名的内容覆盖前面的内容。
$arr3 = array_merge(arr1,arr2)       $arr3 = ['a'=>1, 'b'=>24, 'c'=>'3', 'A'=>1]
然后直接+则相反，会用前面的覆盖后面的内容。
$arr3 = $arr1+$arr2                  $arr3 = ['a'=>1,'b' =>2 ,'c' =>'3', 'A'=>1]
而对于 简单的数组（列表）:
array_merge()会合并两数组，很正常的合并（有重复项），毕竟又不是集合。
$arr1 = ['a','bb','C'];
$arr2 = ['D' ,'E','bb'];
$arr3 = array_merge(arr1,arr2)        $arr3 = ['a','bb','C','D','E','bb']
而+号并没有什么卵用。$arr3 = $arr1+$arr2     $arr3 = ['a','bb','C']

除此之外，还有一个array_merge_recursive() 不会进行键名覆盖，而是将多个相同键名的值递归组成一个数组。
目前还没有使用过...。

===================数组增减=========================
数组添加array_push函数向第一个参数的数组尾部添加一个或多个元素，然后返回新数组的长度。
这里的方法和python的append方法类似，压入的是一个数组的时候，会保留数组结构。
在空数组追加的时候，感觉还是 $arr[] = $v 来的方便。
相比之下，python还有extent方法，解开列表的结构，php的不造有没有（还没搜到...）。

向头部压入数组有array_unshift方法，相比之下python的insert方法插入指定位置，这个也目前不知道php有没有...。

弹出数组是array_pop和python的一样，$pop_value = $array_pop($arr1), 此时$arr1也已经少了一个最后一个元素。 
弹出数组头部的是array_shift，返回的是弹出第一个元素之后的数组 $after_shift = $array_shift($arr1),此时$after_shift 是弹出第一个之后的$arr1。
在还没有使用unset之前，我解决移除id的时候就用的$after_shift方法Orz...。

之后还有数组的截取array_slice(对数组分页的时候用到过)和切割array_splice。

========================其他===========================
判断是否在数组内 in_array();
数组之间的交集差集应用(列表形式比较好用)
差集: array_diff($arr1; $arr2),返回$arr1中特有的。

如果原来是$arr1;变更成了$arr2，如何减少数据库的更新(删除)和插入动作，好用的一招。
先取两者的交集array_intersect(),即不需要改变的部分。
$same_arr = array_intersect($arr1,$arr2);
需要操作的部分
$need_update_arr =  array_diff($arr1,$same_arr)
$need_insert_arr = array_diff($arr2,$same_arr)
这样，对于$same_arr部分就可以减少操作。

array_combine () 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值。
这个少用，如果前台输入的内容校验的不好，或者填写错位，容易出问题(别问我怎么知道的)。

字符串分割成数组explode，数组合并成字符串implode。
json字符串转换成数组 json_decode($json_str,true)，这个true很重要，不然得到的就是一个json对象(json对象目前没怎么用过)。
然后前后台分离返回json的时候，用的一般是json($arr)。
json_encode,对变量进行json编码用的不多。


==================================================================================
==================================================================================
判断是否数字或者数字字符串  is_numeric,对于判断是id搜索还是标题搜索可以用。
判断是否是字符串is_string，对于有特殊要求，简单校验，比如分割成数组或者怎么样的时候可以用。
unset，干掉数组中某一个键值对好用。
isset, 校验的时候用的比较多。
empty，校验的时候用的比较多，适当多写一点empty($v)?'':$v,性能可能微降，但会少很多坑，尤其是对数组有$arr[0]这种操作前，前后台都是。



