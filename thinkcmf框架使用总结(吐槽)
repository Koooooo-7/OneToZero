首先在接触这个项目之前，并没有接触过PHP这门语言。
然后直接开始接触这个框架，有一点直接就实战的感觉。
在用这个框架中去配置和改不同的东西，对这个框架的前台后台都了解了一些。
(tpl文件中原生的异常模版我也改了，后台登录的验证机制我也改了等等。)

首先这个框架是基于tp5的一个框架，但是相比tp5，对于前台和后台（管理员）的控制器和模版做了分离。
我觉得这是一个比较好的想法，另外在控制器命名和继承上也有一套约定俗成的规矩。

既然是框架，那就是对于一些常用的业务逻辑进行了封装，让调用更方便和简单。
=====================================路由===========================================================
对于这个框架处理请求，并没有和之前接触Django一样，需要自己去写正则匹配，之后接触了的一点larvel好像也是url正则匹配的（?）。
这个框架显得很直接，在没有进行url美化，或者说是路由设置的原生情况下，路径就是模块/控制器/方法，已经部分传参。
路由的美化其实就是一种映射关系的对应，可以根据自己的设计思路，把简单的路径变得更restful。
对于前台输入的内容除了在前台js上做校验之外，还需要在后台校验，使用验证控制器validate。

=======================================初始化============================================================
对于类的初始化（可以进行一些覆盖整个模块的校验，或者初始化一些值。比如个人中心模块的控制器，整个下面都需要有"用户已登录"这个状态）。
这个框架有一个public function _initialize(){}方法，使用上来说和PHP自带的构造方法 public function __construct{}好像并没有什么太大的区别，
看了源码发现 _initialize(){}是构造方法public function __construct{}下的一个私有方法，在实例化一个对象之后，构造方法会调用_initialize()方法，
这和直接写一个function __construct{}相比，好像区别不大（???），但是看上去，构造方法执行了一些底层上的逻辑，而_initialize()主要是用来使用的时候
执行一些业务逻辑，数据初始化等等，正如他们的名字一样。

和JAVA不一样的是，在继承后当子类自己本身有构造方法或者初始化方法之后，不会和JAVA一样有"溯源"一样（隐式调用super()方法）把父类构造方法
一一实现下来再到自己，而是只会实现自己本身的构造方法，或者初始化方法，至于静态代码块神马的，还没有接触到Orz。
不管是 __construct{}或者_initialize()要实现父类的构造方法或者初始化方法，都需要显式调用parent::__construct($request);或者 parent::_initialize();
这个地方对于这个框架而言还是有些重要的，因为这个框架前台和后台的HomeBaseController和AdminBaseController都在构造和初始化的时候，放进来了一些
基本的SEO比如网站的title，keywords或者description这样的数据在后台配置。
如果自己在HomeBaseController的基础上抽离出来一个子类给模块的控制器继承的时候不显示调用父类的构造方法，会导致前台输出的内容这部分缺失。
UserBaseController继承HomeBaseController，UserBaseController有自己的初始化方法，而没有调用父类的初始化方法，那么在之后继承UserBaseController的
子类都会丢掉HomeBaseController初始方法中的操作（别问我怎么知道的）。

==========================================数据库==============================================================
数据库操作，也是一种ORM映射，和用Django的时候相比，这个感觉更直观一点，语义上感觉还是很接近sql的，特别是自己去写一些多表join关系的时候。
但是，问题就是，同一个事情，可以选择的方法太多了，甚至是可以用tp5的语法，tp3的语法或者其他，这对于协作编程而言，感觉有些无力吐槽。
对于数据库的操作，值得一提的就是在Model层的多表关联和一些对于指定字段（数据类型，自动写入时间戳）等，还是很方便的。
但是在数据的增删改中，尤其要注意关联表中两者关系的变化，不然可能会有意想不到的结果。
在多表关联中用的比较多的是hasOne 和 belongsToMany，这两个和其相类似的，我居然是去看了larvel的文档再用的。
另外值得一提的就是自带的原生的分页，这个分页和渲染，还有搜索之后带上参数的分页，append,items,render全家桶。
而数据库缓存这个，莫名觉得并没有太大的疗效，可能是数据量少，看日志，发现有没有时间都差不多吧。

============================================代码===================================================================
从刚开始接触PHP到现在，回头看自己的代码，每次都会有一种“为什么要这么写，明明这么写好一点”而会去修修改改的过程。
然后对于业务和代码的抽象程度还不够好，很多代码复用做的不够好，导致代码很臃肿，这需要自己不断学习加强。
对于业务逻辑大致相同的模块，让字段和变量命名尽量相同，在模版渲染的时候也是，这样会让你之后无论是看代码还是改代码，这种和谐感都会莫名舒适。



